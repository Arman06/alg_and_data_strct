Index: MealyMachine.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- MealyMachine.py	(revision 9eb952683bfad854d32f50cea672548b6a2af13b)
+++ MealyMachine.py	(date 1592043876211)
@@ -24,6 +24,10 @@
               "s2": MealyMachine.State(transition={"0": "s1", "1": "s2"}, output={"0": "1", "1": "1"})}
     test1 = MealyMachine(states=states, start_state="s2")
     print(test1.execute(string="011"))
+    states = {"s1": MealyMachine.State(transition={"0": "s1", "1": "s2"}, output={"0": "0", "1": "0"}),
+              "s2": MealyMachine.State(transition={"0": "s1", "1": "s2"}, output={"0": "1", "1": "1"})}
+    test1 = MealyMachine(states=states, start_state="s2")
+    print(test1.execute(string="011"))
 
 
 main()
Index: Parser.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Parser.py	(date 1592239517154)
+++ Parser.py	(date 1592239517154)
@@ -0,0 +1,110 @@
+class FSM:
+
+    class State:
+        def __init__(self, transition, output):
+            self.transition = transition
+            self.output = output
+
+    def __init__(self, states, start_state, final_state=None):
+        self.states = states
+        self.start_state = start_state
+        self.current_state = None
+        self.finite_state = final_state
+
+    def execute(self, string):
+        self.current_state = self.states[self.start_state]
+        out = []
+        for char in string:
+            keyy = None
+            print(char)
+            for key in self.current_state.output.keys():
+                if char in key:
+                    print(char, key)
+                    keyy = key
+                    break
+            out.append(self.current_state.output[keyy])
+            self.current_state = self.states[self.current_state.transition[keyy]]
+        return out
+
+
+class ConditionalParser:
+    _chars = "_01234567890abcdefghijklmnopqrstuvwxyz" + "abcdefghijklmnopqrstuvwxyz".upper()
+    new_group_blueprint = {"vars": "", "op": "", "groups": [], "back": None}
+
+    def __init__(self):
+        states = {"start": FSM.State(transition={"(": "new group", "!<>=&|": "operator"},
+                                     output={"(": ["new group"], "!<>=&|": ["new operator"]}),
+                  "new group": FSM.State(transition={"(": "new group", ConditionalParser._chars: "var"},
+                                         output={"(": ["new group"], ConditionalParser._chars: ["new var"]}),
+                  "var": FSM.State(transition={ConditionalParser._chars: "var",
+                                                        ")": "start", "!><=": "operator"},
+                                   output={ConditionalParser._chars: ["add char var"],
+                                                    ")": ["end var", "end group"], "!><=": ["end var",
+                                                                                            "add char operator"]}),
+                  "operator": FSM.State(transition={"(": "new group",
+                                                    ConditionalParser._chars: "var", "=": "operator"},
+                                        output={"(": ["new group", "end operator"],
+                                                ConditionalParser._chars: ["new var", "end operator"],
+                                                "=": ["add char operator"]})
+                  }
+        self.fsm = FSM(states=states, start_state="start", final_state="start")
+
+    def new_group(self, group, char):
+        group["groups"].append(ConditionalParser.new_group_blueprint.copy())
+        group["groups"][len(group["groups"]) - 1]["back"] = group
+        return group["groups"][len(group["groups"]) - 1]
+
+    def end_group(self, group, char):
+        group = group["back"]
+        return group
+
+    def new_var(self, group, char):
+        group["vars"] += char
+        return group
+
+    def end_var(self, group, char):
+        group["vars"] += "/"
+        return group
+
+    def add_char_var(self, group, char):
+        group["vars"] += char
+        return group
+
+    def new_op(self, group, char):
+        group["op"] += char
+        return group
+
+    def add_char_op(self, group, char):
+        group["op"] += char
+        return group
+
+    def end_op(self, group, char):
+        group["op"] += "/"
+        return group
+
+    def parse(self, expression):
+        if not expression:
+            return
+        expression = expression.replace(" ", "")
+        func_dict = {"new group": self.new_group, "add char operator": self.add_char_op,
+                     "new var": self.new_var, "end var": self.end_var,
+                     "end group": self.end_group, "add char var": self.add_char_var,
+                     "new operator": self.new_op, "end operator": self.end_op}
+        funcs_arr = self.fsm.execute(expression)
+        print(funcs_arr)
+        tokenized = ConditionalParser.new_group_blueprint.copy()
+        for char, funcs in zip(expression, funcs_arr):
+            for func in funcs:
+                print(func, char)
+                tokenized = func_dict[func](tokenized, char)
+                print(tokenized)
+        return tokenized
+
+
+def main():
+    parser = ConditionalParser()
+    parsed = parser.parse("(a != b) & (c > a)")
+    print(parsed["groups"])
+
+
+main()
Index: Fano.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Fano.py	(revision 9eb952683bfad854d32f50cea672548b6a2af13b)
+++ Fano.py	(date 1591866585268)
@@ -27,7 +27,8 @@
     def __init__(self):
         self.root = None
 
-    def equal_sub_lists(self, li):
+    @staticmethod
+    def equal_sub_lists(li):
         li.sort(key=lambda x: x[1], reverse=True)
         one = [li[0]]
         two = li[1:]
@@ -44,7 +45,7 @@
 
     def _shannon_fano_coding(self, cur_node):
         if len(cur_node.value) > 1:
-            left, right = self.equal_sub_lists(cur_node.value)
+            left, right = ShannonFano.equal_sub_lists(cur_node.value)
             cur_node.l_child = self.Node(left)
             cur_node.r_child = self.Node(right)
             self._shannon_fano_coding(cur_node.l_child)
